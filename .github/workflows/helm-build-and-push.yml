name: Build and Push Helm Chart OCI Artifact
on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
      - "v*.*.*-*" # support pre-release tag. For example, v1.2.3-alpha, v1.2.3-beta, v1.2.3-rc1
jobs:
  release:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Determine chart version and tag
        id: version
        run: |
          # Check if triggered by a tag or main branch
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Extract version from tag, removing 'v' prefix
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "Building from tag: $VERSION"
          else
            # Main branch push - use latest as the version
            VERSION="latest"
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "Building from main branch with version: latest"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Chart version: $VERSION"

      - name: Check if prerelease
        id: is_prerelease
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" == *-* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease version: $VERSION"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release version: $VERSION"
          fi

      - name: Setup Helm and Login to GHCR
        run: |
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Login to GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Update chart and image versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Updating versions to: $VERSION"
          
          # Update main Chart.yaml
          sed -i "s/^version: .*/version: $VERSION/" charts/kthena/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: \"$VERSION\"/" charts/kthena/Chart.yaml
          
          # Update image tags in all subchart values.yaml files
          find charts/kthena/charts -name "values.yaml" -exec sed -i "s/tag: latest/tag: $VERSION/g" {} \;
          
          # Verify changes
          echo "=== Updated Chart.yaml ==="
          cat charts/kthena/Chart.yaml
          echo "=== Updated subchart versions ==="
          grep -r "tag: $VERSION" charts/kthena/charts/*/values.yaml || true

      - name: Build and Package Helm Chart
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Building and packaging version: $VERSION"
          
          helm dependency build ./charts/kthena
          helm package ./charts/kthena --version $VERSION --app-version $VERSION

      - name: Push to GHCR
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Extract repository owner and convert to lowercase for GHCR
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          helm push kthena-helm-${VERSION}.tgz oci://ghcr.io/${REPO_OWNER}/charts

      - name: Helm template manifest
        if: steps.version.outputs.is_tag == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Render a single, installable manifest with a sensible default release and namespace
          helm template kthena ./charts/kthena --namespace kthena-system > kthena-install-${VERSION}.yaml
          
          # Create generic manifest (for latest link)
          cp kthena-install-${VERSION}.yaml kthena-install.yaml

      - name: Github Release
        if: steps.version.outputs.is_tag == 'true'
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            ./kthena-helm-${{ steps.version.outputs.version }}.tgz
            ./kthena-install-${{ steps.version.outputs.version }}.yaml
            ./kthena-install.yaml
          prerelease: ${{ steps.is_prerelease.outputs.prerelease }}
