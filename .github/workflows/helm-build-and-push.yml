name: Build and Push Helm Chart OCI Artifact
on:
  push:
    branches:
      - main
    paths:
      - "charts/kthena/**"
      - 'python/**'
      - '**.go'
      - "pkg/**"
      - "cmd/**"
      - "go.mod"
      - "go.sum"
    tags:
      - "v*.*.*"
      - "v*.*.*-*" # support pre-release tag. For example, v1.2.3-alpha, v1.2.3-beta, v1.2.3-rc1
jobs:
  build:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_tag: ${{ steps.version.outputs.is_tag }}
      prerelease: ${{ steps.is_prerelease.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Necessary to get the git commit hash for versioning

      - name: Determine chart version and tag
        id: version
        run: |
          # Check if triggered by a tag or main branch
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Extract version from tag, removing 'v' prefix
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "Building from tag: $VERSION"
          else
            # Main branch push - use latest as the version
            VERSION="0.0.0-main-$(date -u +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)"
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "Building from main branch with dev version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Chart version: $VERSION"

      - name: Check if prerelease
        if: steps.version.outputs.is_tag == 'true'
        id: is_prerelease
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ "$VERSION" == *-* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease version: $VERSION"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release version: $VERSION"
          fi

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.4 # Use a specific, stable version of Helm

      - name: Setup yq
        uses: mikefarah/yq@v4.44.1

      - name: Setup Crane
        uses: imjasonh/setup-crane@v0.4

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Update chart and image versions
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CHART_PATH="charts/kthena"
          echo "Updating versions to: $VERSION"
          
          # Update main Chart.yaml using yq for reliability
          yq e -i '.version = "'$VERSION'"' $CHART_PATH/Chart.yaml
          yq e -i '.appVersion = "'$VERSION'"' $CHART_PATH/Chart.yaml
          
          echo "Updating image tags in parent values.yaml"
          yq e -i '
            .workload.controllerManager.image.tag = "'$VERSION'" |
            .workload.controllerManager.downloaderImage.tag = "'$VERSION'" |
            .workload.controllerManager.runtimeImage.tag = "'$VERSION'" |
            .networking.kthenaRouter.image.tag = "'$VERSION'"
          ' $CHART_PATH/values.yaml
          
          echo "=== Updated Chart.yaml ==="
          cat $CHART_PATH/Chart.yaml
          
          echo "=== Updated values.yaml ==="
          cat $CHART_PATH/values.yaml

      - name: Build and Package Helm Chart
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Building and packaging version: $VERSION"
          
          helm dependency build ./charts/kthena
          helm package ./charts/kthena --version $VERSION --app-version $VERSION

      - name: Push to GHCR
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          helm push kthena-${VERSION}.tgz oci://ghcr.io/${REPO_OWNER}/charts

      - name: Apply 'latest' tag for main branch builds
        if: steps.version.outputs.is_tag == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          SOURCE_CHART="ghcr.io/${REPO_OWNER}/charts/kthena:${VERSION}"
          
          echo "Tagging ${SOURCE_CHART} as 'latest'"
          crane tag "${SOURCE_CHART}" latest

      - name: Helm template manifest
        if: steps.version.outputs.is_tag == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          helm template kthena ./charts/kthena --namespace kthena-system > kthena-install-${VERSION}.yaml
          cp kthena-install-${VERSION}.yaml kthena-install.yaml

      - name: Upload release artifacts
        if: steps.version.outputs.is_tag == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            ./kthena-${{ steps.version.outputs.version }}.tgz
            ./kthena-install-${{ steps.version.outputs.version }}.yaml
            ./kthena-install.yaml
  release:
    needs: build
    if: needs.build.outputs.is_tag == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts

      - name: Prepare Release Body
        id: release_body
        run: |
          # Construct the OCI URI from the same variables used in the push step
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          OCI_URI="oci://ghcr.io/${REPO_OWNER}/charts/kthena"
          VERSION="${{ needs.build.outputs.version }}"
          
          # Use a HEREDOC to create a multi-line markdown string
          cat <<EOF > release_notes.md
          ### Installation
          To install this version of the chart, you can use the following command:
          \`\`\`bash
          helm install my-release ${OCI_URI} --version ${VERSION}
          \`\`\`
          For more detailed instructions, including prerequisites and advanced configuration, please see our [installation guide](https://kthena.volcano.sh/docs/getting-started/installation).
          EOF

      - name: Github Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          generate_release_notes: true
          files: |
            ./kthena-${{ needs.build.outputs.version }}.tgz
            ./kthena-install-${{ needs.build.outputs.version }}.yaml
            ./kthena-install.yaml
          prerelease: ${{ needs.build.outputs.prerelease || 'false' }}
    